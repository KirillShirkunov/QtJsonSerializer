/*!
@class QJsonSerializer

This class is the modules core component. It performs the de/serialization. Normally, you will
only use the public members of this class. However, in some cases, you may have to add custom
code to properly serialize special classes. In order to modify the general serialization
behavior, have a look at the properties.

@section supported Supported types
The serializer supports a bunch of types by default, but there are limitations. Check the main
page @ref qtjsonserializer_readme_label_4 "Usage Hints" for details about what is possible and what is not.

@section extending Extending the serializer
To extend the serializers functionality, create a custom implementation of the QJsonTypeConverter class.
Check it's documentation for more details and an example on how to. Once you've created a custom converter
class, you can add it to a serializer instance by using QJsonSerializer::addJsonTypeConverter.
*/

/*!
@property QJsonSerializer::allowDefaultNull

@default{`false`}

Applies to deserialization only.<br/>
If set to `false`, a `null` json value can only be converted to a QObject (`nullptr`)! For value
types (including Q_GADGETs!), the conversion will fail instead. This is a strict mode, since for
value types, there is no null value.<br/>
If set to `true`, `null` is allowed for all types. If it's not a QObject, a default
constructed value will be used.

@note If you are deserializing json from external sources, it's possible they don't follow this
approach, and in order to get a working deserialization, you will have to enable this property.

@accessors{
	@readAc{allowDefaultNull()}
	@writeAc{setAllowDefaultNull()}
}
*/

/*!
@property QJsonSerializer::keepObjectName

@default{`false`}

Applies to serialization only.<br/>
By default, the QObject::objectName property will not be serialized for QObjects! If you need to
keep this information, set the property to `true`

@note If the `objectName` is contained in json, a deserialization will use that value, independent
of this property.

@accessors{
	@readAc{keepObjectName()}
	@writeAc{setKeepObjectName()}
}
*/

/*!
@property QJsonSerializer::enumAsString

@default{`false`}

Applies to serialization only.<br/>
By default, enums and flags are serialized as an integer, representing their value. If you want
to serialize them as a string, the "name" of each value, enable this propterty.

@note For deserialization, both int and string are always correctly deserialized.

@accessors{
	@readAc{enumAsString()}
	@writeAc{setEnumAsString()}
}
*/

/*!
@property QJsonSerializer::validateBase64

@default{`true`}

Applies to deserialization only.<br/>
If active, the date is checked first to verify it is actually a base64 encoded string. If thats not the case
an exception will be thrown. When disabled, invalid characters are silently discarded, so no error is reported

@accessors{
	@readAc{validateBase64()}
	@writeAc{setValidateBase64()}
}
*/

/*!
@property QJsonSerializer::useBcp47Locale

@default{`true`}

Applies to serialization only.<br/>
The property can be used to change how QLocale is serialized. If active, a bcp47 local string is created (See QLocale::bcp47Name()).
That string is able to encode all information contained in the locale, but is not as wide spread as the "simple name format". That one
is used if set to false (See QLocale::name())

Both formats are accepted for deserialization

@accessors{
	@readAc{useBcp47Locale()}
	@writeAc{setUseBcp47Locale()}
}

@sa QLocale::bcp47Name, QLocale::name
*/

/*!
@property QJsonSerializer::validationFlags

@default{`QJsonSerialzer::StandardValidation`}

Applies to deserialization only.<br/>
By specifying those flags, you can set which additional attributes the serializer should check when deserializing.
In those stricter modes, the serializer will fail with an exception if the conditions are not met instead of simply
using defaults values etc.

@accessors{
	@readAc{validationFlags()}
	@writeAc{setValidationFlags()}
}

@sa QJsonSerializer::ValidationFlag
*/

/*!
@property QJsonSerializer::polymorphing

@default{`QJsonSerialzer::Enabled`}

@attention Only applicable for QObject deriving classes

Depending on the set mode QObject deriving classes are de/serialized differently. Polymorphing in this
context can be easily described with a simple example:

@code{.cpp}
class Foo : public QObject {
//...
	Q_PROPERTY(int foo MEMBER foo)
//...
};

class Bar : public Foo {
//...
	Q_PROPERTY(int bar MEMBER bar)
	Q_CLASSINFO("polymorphic", "true")
//...
};
@endcode

Assuming you are de/serializing `Foo*`, but it actually is a `Bar*` object, for example: `serialize<Foo*>(new Bar());`

For Serialization:<br/>
With polymorphing `QJsonSerialzer::Disabled`, any additional information about a type is ignored. `Bar` is serialized as `Foo`, and
the json would only contain the `foo` property. With it beeing `QJsonSerialzer::Enabled`, by default no polymorphic information
is stored. However, if the type "declares" polymorphism (as in this example Bar does) it is stored. So here `Bar` is actually serialized
as `Bar`. In order to make deserialization possible, an additional json value, @@class is created containing the actual class name, `Bar`.
The json contains this property, the `foo` and the `bar` property. If polymorphism is `QJsonSerialzer::Forced`, any type is treated like `Bar`
in the previous case, even if no polymorphism is specified. For all types, even simple QObjects, the @@class is added and the actual typed serialized.

For Deserialization:<br/>
With polymorphing `QJsonSerialzer::Disabled`, the @@class json property is ignored, and a value always deserialized as the given
property type. So even if `@@class` is set to `Bar`, only a `Foo` object is created, and the `bar` property ignored. By using
`QJsonSerialzer::Enabled`, if the json does contain the @@class property, the serializer creates an instance of the class named by
this property. Here, a `Bar` object is created, with both the `foo` and the `bar` property correctly read. When set to `QJsonSerialzer::Forced`,
every json object to be deserialized as QObject must have the @@class property, or otherwise an exception is thrown.

<b>Declare objects polymorphic:</b><br/>
There are to ways to make objects polymorphic. The first is static and uses `Q_CLASSINFO`. Simply add the macro to the class
that should be polymorphic as `Q_CLASSINFO("polymorphic", "true")`. You can also set it to false, to disable polymorphism in
case the class you inherit has this already set to true.

The second way is to use a dynamic property. The property overrides the classinfo, but has to be set on an actual instance of
the object to be serialized. Set the property by calling `setProperty("__qt_json_serializer_polymorphic", true);`. Just like with class info, you can set it
to false to disable it.

@note This is only required for serialization. When deserializing, Polymorphism is determined by the @@class property. If it
is present, the data is treated polymorphic.

@accessors{
	@readAc{polymorphing()}
	@writeAc{setPolymorphing()}
}
*/

/*!
@fn QJsonSerializer::registerInverseTypedef

@tparam T The type to register the original name for
@param typeName The name to be registered

Use this method in case you are working with a typedef that was registered as the primary
type it Qt using #Q_DECLARE_METATYPE. This can be neccessary for some container types. Simple example:

@code{.cpp}
using MyMap = QMap<QString, int>;
Q_DECLARE_METATYPE(MyMap);

// ...

QJsonSerializer::registerInverseTypedef<MyMap>("QMap<QString, int>");
@endcode

@sa QJsonTypeConverter::getCanonicalTypeName
*/

/*!
@fn QJsonSerializer::registerListConverters

@tparam T The type to register converters for

Performs the registration of converters for `QList<T> <--> QVariantList`. This conversion is a
requirement for the serializer, if you want to be able to serialize lists of a type. The function
calls the following methods for the given type:
- `QMetaType::registerConverter<QList<T>, QVariantList>()`
- `QMetaType::registerConverter<QVariantList, QList<T>>()`

with a generic conversion using QVariant.

The following types are already registered by default:
<table>
<tr><th>Default list converters</th></tr>
<tr><td>bool</td></tr>
<tr><td>int</td></tr>
<tr><td>unsigned int</td></tr>
<tr><td>double</td></tr>
<tr><td>QChar</td></tr>
<tr><td>QString</td></tr>
<tr><td>long long</td></tr>
<tr><td>short</td></tr>
<tr><td>char</td></tr>
<tr><td>unsigned long</td></tr>
<tr><td>unsigned long long</td></tr>
<tr><td>unsigned short</td></tr>
<tr><td>signed char</td></tr>
<tr><td>unsigned char</td></tr>
<tr><td>float</td></tr>
<tr><td>QDate</td></tr>
<tr><td>QTime</td></tr>
<tr><td>QUrl</td></tr>
<tr><td>QDateTime</td></tr>
<tr><td>QUuid</td></tr>
<tr><td>QObject *</td></tr>
</table>

@sa QJsonSerializer::registerAllConverters, QJsonSerializer::registerMapConverters
*/

/*!
@fn QJsonSerializer::registerMapConverters

@tparam T The type to register converters for

Performs the registration of converters for `QMap<QString, T> <--> QVariantMap`. This conversion is a
requirement for the serializer, if you want to be able to serialize maps of a type. The function
calls the following methods for the given type:
- `QMetaType::registerConverter<QMap<QString, T>, QVariantMap>()`
- `QMetaType::registerConverter<QVariantMap, QMap<QString, T>>()`

with a generic conversion using QVariant.

The types for which converters are already registered are the same as for QJsonSerializer::registerListConverters

@sa QJsonSerializer::registerAllConverters, QJsonSerializer::registerListConverters
*/

/*!
@fn QJsonSerializer::registerAllConverters

@tparam T The type to register converters for

A shortcut for all the container registrations QJsonSerializer provides. The method internally calls:
- `QJsonSerializer::registerListConverters<T>()`
- `QJsonSerializer::registerMapConverters<T>()`

@sa QJsonSerializer::registerListConverters, QJsonSerializer::registerMapConverters,
QJsonSerializer::registerPointerConverters, QJsonSerializer::registerPairConverters,
QJsonSerializer::registerTupleConverters
*/

/*!
@fn QJsonSerializer::registerPointerConverters

@tparam T The type to register converters for

Performs the registration of converters for `QSharedPointer<T> <--> QSharedPointer<QObject>` and
`QPointer<T> <--> QPointer<QObject>`. This conversion is a requirement for the serializer, if you
want to be able to serialize QSharedPointers or QPointers of a type. The function calls the following
methods for the given type:
- `QMetaType::registerConverter<QSharedPointer<QObject>, QSharedPointer<T>>()`
- `QMetaType::registerConverter<QSharedPointer<T>, QSharedPointer<QObject>>()`
- `QMetaType::registerConverter<QPointer<QObject>, QPointer<T>>()`
- `QMetaType::registerConverter<QPointer<T>, QPointer<QObject>>()`

@sa QJsonSerializer::registerAllConverters, QJsonSerializer::registerPairConverters,
QJsonSerializer::registerTupleConverters
*/

/*!
@fn QJsonSerializer::registerPointerListConverters

@tparam T The type to register converters for

A shortcut for all the container registrations QJsonSerializer provides. The method internally calls:
- `QJsonSerializer::registerPointerConverters<T>()`
- `QJsonSerializer::registerAllConverters<QSharedPointer<T>>()`
- `QJsonSerializer::registerAllConverters<QPointer<T>>()`

@sa QJsonSerializer::registerAllConverters, QJsonSerializer::registerPointerConverters
*/

/*!
@fn QJsonSerializer::registerPairConverters

@tparam T1 The first type to register converters for
@tparam T2 The second type to register converters for
@param originalTypeName If given, automatically registers an inverse typedef for the given std::pair

Performs the registration of converters for `QPair<T1, T2> <--> QPair<QVariant, QVariant>`
and `std::pair<T1, T2> <--> QPair<QVariant, QVariant>`.
This conversion is a requirement for the serializer, if you want to be able to serialize
pairs with the given two types. The function calls the following methods for the given type:
- `QMetaType::registerConverter<QPair<T1, T2>, QPair<QVariant, QVariant>>()`
- `QMetaType::registerConverter<QPair<QVariant, QVariant>, QPair<T1, T2>>()`
- `QMetaType::registerConverter<std::pair<T1, T2>, QPair<QVariant, QVariant>>()`
- `QMetaType::registerConverter<QPair<QVariant, QVariant>, std::pair<T1, T2>>()`

If originalTypeName is set, this method also calls
`QJsonSerializer::registerInverseTypedef<std::pair<T1, T2>>(originalTypeName);`.

@attention Only this very specific combination in this specific order is registered. If you change
one type to another, or swap the two types, you need to call this method again with this different pair.

@sa QJsonSerializer::registerAllConverters, QJsonSerializer::registerPointerConverters,
QJsonSerializer::registerTupleConverters, QJsonSerializer::registerInverseTypedef
*/

/*!
@fn QJsonSerializer::registerTupleConverters

@tparam TArgs The types that make up the tuple to register converters for
@param originalTypeName If given, automatically registers an inverse typedef for the given std::tuple

Performs the registration of converters for `std::tuple<TArgs...> <--> QVariantList`.
This conversion is a requirement for the serializer, if you want to be able to serialize
tuples with the given two types. The function calls the following methods for the given type:
- `QMetaType::registerConverter<std::tuple<TArgs...>, QVariantList>()`
- `QMetaType::registerConverter<QVariantList, std::tuple<TArgs...>>()`

If originalTypeName is set, this method also calls
`QJsonSerializer::registerInverseTypedef<std::tuple<TArgs...>>(originalTypeName);`.

@attention Only this very specific combination in this specific order is registered. If you change
one type to another, or swap the types, you need to call this method again with this different type set.

@sa QJsonSerializer::registerAllConverters, QJsonSerializer::registerPointerConverters,
QJsonSerializer::registerPairConverters, QJsonSerializer::registerInverseTypedef
*/

/*!
@fn QJsonSerializer::serialize(const QVariant &) const

@param data The data to be serialized
@returns The serialized value
@throws QJsonSerializationException Thrown if the serialization fails

@sa QJsonSerializer::deserialize, QJsonSerializer::serializeTo
*/

/*!
@fn QJsonSerializer::serialize(const T &) const

@tparam T The type of the data to be serialized
@copydetails QJsonSerializer::serialize(const QVariant &) const
*/

/*!
@fn QJsonSerializer::serializeTo(QIODevice *, const QVariant &) const

@param device The device to write the json to
@param data The data to be serialized
@throws QJsonSerializationException Thrown if the serialization fails

@sa QJsonSerializer::deserializeFrom, QJsonSerializer::serialize
*/

/*!
@fn QJsonSerializer::serializeTo(QIODevice *, const QVariant &, QJsonDocument::JsonFormat) const

@param format The formatting for the generated json (compact or intended)
@copydetails QJsonSerializer::serializeTo(QIODevice *, const QVariant &) const
*/

/*!
@fn QJsonSerializer::serializeTo(const QVariant &) const

@param data The data to be serialized
@returns The serialized data as byte array
@throws QJsonSerializationException Thrown if the serialization fails

@sa QJsonSerializer::deserializeFrom, QJsonSerializer::serialize
*/

/*!
@fn QJsonSerializer::serializeTo(const QVariant &, QJsonDocument::JsonFormat) const

@param format The formatting for the generated json (compact or intended)
@copydetails QJsonSerializer::serializeTo(const QVariant &) const
*/

/*!
@fn QJsonSerializer::serializeTo(QIODevice *, const T &, QJsonDocument::JsonFormat) const

@tparam T The type of the data to be serialized
@copydetails QJsonSerializer::serializeTo(QIODevice *, const QVariant &, QJsonDocument::JsonFormat) const
*/

/*!
@fn QJsonSerializer::serializeTo(const T &, QJsonDocument::JsonFormat) const

@tparam T The type of the data to be serialized
@copydetails QJsonSerializer::serializeTo(const QVariant &, QJsonDocument::JsonFormat) const
*/

/*!
@fn QJsonSerializer::deserialize(const QJsonValue &, int, QObject*) const

@param json The data to be deserialized
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws QJsonDeserializationException Thrown if the deserialization fails

@sa QJsonSerializer::serialize, QJsonSerializer::deserializeFrom
*/

/*!
@fn QJsonSerializer::deserialize(const typename _qjsonserializer_helpertypes::json_type<T>::type &, QObject*) const

@tparam T The type of the data to be deserialized
@param json The data to be deserialized
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws QJsonDeserializationException Thrown if the deserialization fails

@sa QJsonSerializer::serialize, QJsonSerializer::deserializeFrom
*/

/*!
@fn QJsonSerializer::deserializeFrom(QIODevice *, int, QObject*) const

@param device The device to read the json to be deserialized from
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws QJsonDeserializationException Thrown if the deserialization fails

@sa QJsonSerializer::serializeTo, QJsonSerializer::deserialize
*/

/*!
@fn QJsonSerializer::deserializeFrom(QIODevice *, QObject*) const

@tparam T The type of the data to be deserialized
@param device The device to read the json to be deserialized from
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws QJsonDeserializationException Thrown if the deserialization fails

@sa QJsonSerializer::serializeTo, QJsonSerializer::deserialize
*/

/*!
@fn QJsonSerializer::deserializeFrom(const QByteArray &, int, QObject*) const

@param data The data to read the json to be deserialized from
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws QJsonDeserializationException Thrown if the deserialization fails

@sa QJsonSerializer::serializeTo, QJsonSerializer::deserialize
*/

/*!
@fn QJsonSerializer::deserializeFrom(const QByteArray &, QObject*) const

@tparam T The type of the data to be deserialized
@param data The data to read the json to be deserialized from
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws QJsonDeserializationException Thrown if the deserialization fails

@sa QJsonSerializer::serializeTo, QJsonSerializer::deserialize
*/

/*!
@fn QJsonSerializer::addJsonTypeConverter()

@tparam T The converter-class to add

Adds a custom converter class to add additional serialization capabilities. Check
the QJsonTypeConverter documentation for details.

@sa QJsonTypeConverter
*/

/*!
@fn QJsonSerializer::addJsonTypeConverter(QSharedPointer<QJsonTypeConverter>)

@param converter The converter to add

Adds a custom converter class to add additional serialization capabilities. Check
the QJsonTypeConverter documentation for details.

@warning The serializer takes ownership of the converter and may delete it any time after
this methods has been called.

@sa QJsonTypeConverter
*/
